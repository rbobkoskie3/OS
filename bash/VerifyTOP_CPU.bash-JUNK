#! /bin/bash

# ID: rb868x 6912 Sep  1 20:37 VerifyTOP_CPU.bash

clear

TOPDIR=/tmp/TOP
rm $TOPDIR 2>/dev/null
TMP_1=/tmp/TMP_1
TMP_2=/tmp/TMP_2
TMP_11=/tmp/TMP_11
TMP_22=/tmp/TMP_22
TMP_12=/tmp/TMP_12
TMP_LINUX=/tmp/LINUX
TMP_SOLARIS=/tmp/SOLARIS
PIDS=/tmp/PIDS

FILTER_ALL='((8[5-9]|9[0-9]|100)\.[0-9])|^100[^0-9]'
INFO='(8[5-9])\.[0-9]'
WARNING='(9[0-5])\.[0-9]'
CRITICAL='(9[6-9]|100)\.[0-9]|100[^0-9]'

BOOL_CRIT=false
BOOL_WARN=false

OS=`uname -s`
if [ `echo $OS |grep -i linux` ]; then
   OS=linux
   cat TOP_JUNK > $TMP_LINUX
   cat $TMP_LINUX | egrep '^[^a-zA-Z]' | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s\n", $9, $10, $2, $1 }' | egrep $FILTER_ALL > $TMP_1

   # Copy PIDS to file to use for regex match
   cat $TMP_1 | awk -F' ' '{ print $4 }' > $PIDS
   cat $TMP_LINUX | egrep '^[^a-zA-Z]' | awk -F' ' '{ if ($9 != $10) printf "%-10s %-10s %-10s %-10s\n", $10, $9, $2, $1 }' | egrep $FILTER_ALL | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s\n", $2, $1, $3, $4 }' >> $TMP_12

   # Eliminate any duplicate PIDS from $TMP_12
   for i in `cat $PIDS`; do
      sed -i -e '/[a-zA-Z] *'"`echo $i`"' *$/d' $TMP_12
   done
   # Merge files, no duplicate PIDS
   cat $TMP_12 >> $TMP_1
   cat $TMP_LINUX | egrep '^[a-zA-Z]' | awk -F',' '{ printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s\n", $1, $2, $3, $5, $6, $7, $8 }' | egrep $FILTER_ALL > $TMP_11
else
   OS=solaris
   cat TOP_JUNK > $TMP_SOLARIS
   cat $TMP_SOLARIS | egrep '^[^a-zA-Z]' | awk -F' ' '{ printf "%-10s %-10s %-10s\n", $10, $2, $1 }' | egrep $FILTER_ALL > $TMP_1
   cat $TMP_SOLARIS | egrep '^[a-zA-Z]' | awk -F',' '{ printf "%-10s %-10s %-10s %-10s\n", $2, $3, $4, $5 }' | egrep $FILTER_ALL > $TMP_11
fi


#####################################
# Logic for assigning priority to overall CPU Utilization in TOP table

if [[ -s $TMP_11 ]]; then
   echo CPU utilization is above thresholds, output also saved in $TOPDIR
   if [ $OS == linux ]; then
      echo -e "\nALARM USER SYS NICE WA HI SI ST" | awk '{ printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s\n\n", $1, $2, $3, $4, $5, $6, $7, $8 }' |tee -a $TOPDIR
   else
      echo -e "\nALARM USER KERNAL IOWAIT SWAP" | awk '{ printf "%-10s %-10s %-10s %-10s %-10s\n\n", $1, $2, $3, $4, $5 }' |tee -a $TOPDIR
   fi
else
   echo CPU utilization in check
fi

# echo -e "`date +%Y' '%m/%d' '%H:%M:%S` WARNING:"

# CRITICAL
if [ $OS == linux ]; then
   cat $TMP_11 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s\n", "CRITICAL:", $2, $3, $4, $5, $6, $7, $8 }' | egrep $CRITICAL > $TMP_22
   if [[ -s $TMP_22 ]]; then
      cat $TMP_22 |tee -a $TOPDIR
      BOOL_CRIT=true
   fi
else
   cat $TMP_11 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s\n", "CRITICAL:", $1, $3, $5, $7 }' | egrep $CRITICAL > $TMP_22
   if [[ -s $TMP_22 ]]; then
      cat $TMP_22 |tee -a $TOPDIR
      BOOL_CRIT=true
   fi
fi

# WARNING
if [ $BOOL_CRIT == false ]; then
   if [ $OS == linux ]; then
      cat $TMP_11 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s\n", "WARNING:", $2, $3, $4, $5, $6, $7, $8 }' | egrep $WARNING > $TMP_22
      if [[ -s $TMP_22 ]]; then
         cat $TMP_22 |tee -a $TOPDIR
         BOOL_WARN=true
      fi
   else
      cat $TMP_11 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s\n", "WARNING:", $1, $3, $5, $7 }' | egrep $WARNING > $TMP_22
      if [[ -s $TMP_22 ]]; then
         cat $TMP_22 |tee -a $TOPDIR
         BOOL_WARN=true
      fi
   fi
fi

# INFO
if [[ $BOOL_CRIT == false && $BOOL_WARN == false ]]; then
   if [ $OS == linux ]; then
      cat $TMP_11 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s\n", "INFO:", $2, $3, $4, $5, $6, $7i, $8 }' | egrep $INFO > $TMP_22
      if [[ -s $TMP_22 ]]; then
         cat $TMP_22 |tee -a $TOPDIR
      fi
   else
      cat $TMP_11 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s\n", "INFO:", $1, $3, $5, $7 }' | egrep $INFO > $TMP_22
      if [[ -s $TMP_22 ]]; then
         cat $TMP_22 |tee -a $TOPDIR
      fi
   fi
fi


#####################################
# Logic for assigning priority to processes in TOP table

if [[ -s $TMP_1 ]]; then
   echo The following processes are using resources, output also saved in $TOPDIR
   if [ $OS == linux ]; then
      echo -e "\nALARM CPU MEM USER PID" | awk '{ printf "%-10s %-10s %-10s %-10s %-10s\n\n", $1, $2, $3, $4, $5 }' |tee -a $TOPDIR
   else
      echo -e "\nALARM CPU USERNAME PID" | awk '{ printf "%-10s %-10s %-10s %-10s\n\n", $1, $2, $3, $4 }' |tee -a $TOPDIR
   fi
else
   echo system processes are in check

   # Cleanup Files
   rm $TOPDIR 2>/dev/null
   rm $TMP_1 2>/dev/null
   rm $TMP_2 2>/dev/null
   rm $TMP_11 2>/dev/null
   rm $TMP_22 2>/dev/null
   rm $TMP_12 2>/dev/null
   rm $TMP_LINUX 2>/dev/null
   rm $TMP_SOLARIS 2>/dev/null
   rm $PIDS 2>/dev/null
   exit 1
fi

# echo -e "`date +%Y' '%m/%d' '%H:%M:%S` WARNING:"

# CRITICAL
if [ $OS == linux ]; then
   cat $TMP_1 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s\n", "CRITICAL:", $1, $2, $3, $4 }' | egrep $CRITICAL > $TMP_2
   if [[ -s $TMP_2 ]]; then
      cat $TMP_2 |tee -a $TOPDIR
      # Copy CRITICAL PIDS to file to use for regex match '>' overwrite $PIDS
      cat $TMP_2 | awk -F' ' '{ print $5 }' > $PIDS
   fi
else
   cat $TMP_1 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s\n", "CRITICAL:", $1, $2, $3 }' | egrep $CRITICAL > $TMP_2
   if [[ -s $TMP_2 ]]; then
      cat $TMP_2 |tee -a $TOPDIR
   fi
fi

# WARNING
if [ $OS == linux ]; then
   cat $TMP_1 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s\n", "WARNING:", $1, $2, $3, $4 }' | egrep $WARNING > $TMP_2
   if [[ -s $TMP_2 ]]; then
      # Verify that any PIDS that were CRITICAL will not be counted as WARNING
      for i in `cat $PIDS`; do
         sed -i -e '/[a-zA-Z] *'"`echo $i`"' *$/d' $TMP_2
      done
      cat $TMP_2 |tee -a $TOPDIR
      # Copy WARNING PIDS to file to use for regex match
      cat $TMP_2 | awk -F' ' '{ print $5 }' >> $PIDS
   fi
else
   cat $TMP_1 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s\n", "WARNING:", $1, $2, $3 }' | egrep $WARNING > $TMP_2
   if [[ -s $TMP_2 ]]; then
      cat $TMP_2 |tee -a $TOPDIR
   fi
fi

# INFO
if [ $OS == linux ]; then
   cat $TMP_1 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s %-10s\n", "INFO:", $1, $2, $3, $4 }' | egrep $INFO > $TMP_2
   if [[ -s $TMP_2 ]]; then
      # Verify that any PIDS that were CRITICAL and/or WARNING will not be counted as INFO
      for i in `cat $PIDS`; do
         sed -i -e '/[a-zA-Z] *'"`echo $i`"' *$/d' $TMP_2
      done
      cat $TMP_2 |tee -a $TOPDIR
   fi
else
   cat $TMP_1 | awk -F' ' '{ printf "%-10s %-10s %-10s %-10s\n", "INFO:", $1, $2, $3 }' | egrep $INFO > $TMP_2
   if [[ -s $TMP_2 ]]; then
      cat $TMP_2 |tee -a $TOPDIR
   fi
fi

rm $TMP_1 2>/dev/null
rm $TMP_2 2>/dev/null
rm $TMP_11 2>/dev/null
rm $TMP_22 2>/dev/null
rm $TMP_12 2>/dev/null
rm $TMP_LINUX 2>/dev/null
rm $TMP_SOLARIS 2>/dev/null
rm $PIDS 2>/dev/null
