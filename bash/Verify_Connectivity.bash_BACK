#! /bin/bash

# ID: rb868x 5328 Sep 14 15:13 Verify_Connectivity.bash

clear

if [ ! -w ~root ]; then
   echo "\"$USER\" cannot execute this command...must be root.  Exiting..."
   exit 1
fi


# These Vars used to uniquely identify the connectivity to server
VERIFY_DATACACHE_PUSHDB=DATACACHE_PUSHDB
VERIFY_DATACACHE_PUSHFILES=DATACACHE_PUSHFILES
VERIFY_DATACACHE_9017=DATACACHE_9017
VERIFY_IGW_9017=IGW_9017
VERIFY_FATHOM=FATHOM
VERIFY_ANLPORTAL=ANLPORTAL

CONNECTIVITY=/tmp/CONNECTIVITY
CONNECTIVITY_INFO=/tmp/CONNECTIVITY_INFO
CONNECTIVITY_WARNING=/tmp/CONNECTIVITY_WARNING
SERVER=/tmp/SERVER
VERIFY_CONNECTION=/tmp/VERIFY_CONNECTION

rm $CONNECTIVITY 2>/dev/null

# Determine Role, if not Report Server, then exit
ROLE=`floodenv whoHasRole -h database`
if [ `hostname` != $ROLE ]; then
   echo INFO: | awk '{ printf "%-15s %-30s %-30s\n", $1, "THIS IS NOT A REPORT SERVER", "THIS TEST ONLY RUNS ON A REPORT SERVER" }' |tee -a $CONNECTIVITY
   exit 2
fi


# Verify Connectivity
echo Connectivity will be verified, results saved to $CONNECTIVITY

##########################################
# Datacache
##########################################
ROLE=`floodenv whoHasRole -f datacache`
if [ $ROLE ]; then
   echo -e "$VERIFY_DATACACHE_PUSHDB|$ROLE\n" >> $SERVER
   echo -e "$VERIFY_DATACACHE_PUSHFILES|$ROLE\n" >> $SERVER
   echo -e "$VERIFY_DATACACHE_9017|$ROLE\n" >> $SERVER

   # Verify Connectivity (PUSH DB, ID=flood) to Secaucus Datacache VIP
   FQDN=`grep $VERIFY_DATACACHE_PUSHDB $SERVER |awk -F'|' '{ print $2}'`
   su flood -c "ssh -i ~flood/.ssh/batch_remote floodxfr@$FQDN hostname" >> $VERIFY_CONNECTION
   if [ $? -ne 0 ]; then
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "CRITICAL:", $1, "Secaucus DBC VIP (PUSH DB)", "NO CONNECTIVITY" }' |tee -a $CONNECTIVITY
   else
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "INFO:", $1, "Secaucus DBC VIP (PUSH DB)", "CONNECTIVITY OK" }' >> $CONNECTIVITY_INFO
   fi

   # Verify Connectivity (PUSH FILES, ID=floodxfr) to Secaucus Datacache VIP
   FQDN=`grep $VERIFY_DATACACHE_PUSHFILES $SERVER |awk -F'|' '{ print $2}'`
   su floodxfr -c "ssh -i ~floodxfr/.ssh/batch_remote floodxfr@$FQDN hostname" >> $VERIFY_CONNECTION
   if [ $? -ne 0 ]; then
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "CRITICAL:", $1, "Secaucus DBC VIP (PUSH FILES)", "NO CONNECTIVITY" }' |tee -a $CONNECTIVITY
   else
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "INFO:", $1, "Secaucus DBC VIP (PUSH FILES)", "CONNECTIVITY OK" }' >> $CONNECTIVITY_INFO
   fi

   # Verify Connectivity (via Port 9017) to Secaucus Datacache VIP
   # NOTE --- This test calls the Python script "Verify_Connectivity_DBC_9017.py"
   FQDN=`grep $VERIFY_DATACACHE_9017 $SERVER |awk -F'|' '{ print $2}'`
   su flood -c "floodenv python-flood Verify_Connectivity_DBC_9017.py" >> $VERIFY_CONNECTION
   if [ $? -eq 0 ]; then
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "CRITICAL:", $1, "Secaucus DBC VIP (9017)", "NO CONNECTIVITY" }' |tee -a $CONNECTIVITY
   else
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "INFO:", $1, "Secaucus DBC VIP (9017)", "CONNECTIVITY OK" }' >> $CONNECTIVITY_INFO
   fi
else
   echo DATACACHE | awk '{ printf "%-15s %-30s %-30s\n", "WARNING:", $1, "ROLE Not Defined" }' |tee -a $CONNECTIVITY_WARNING
fi


##########################################
# IGW
##########################################
ROLE=`floodenv whoHasRole -f digger`
if [ $ROLE ]; then
   echo -e "$VERIFY_IGW_9017|$ROLE\n" >> $SERVER

   # Verify Connectivity (via Port 9017) to Secaucus IGW VIP
   # NOTE --- This test calls the Python script "Verify_Connectivity_IGW_9017.py"
   FQDN=`grep $VERIFY_IGW_9017 $SERVER |awk -F'|' '{ print $2}'`
   su flood -c "floodenv python-flood Verify_Connectivity_IGW_9017.py" >> $VERIFY_CONNECTION
   if [ $? -eq 0 ]; then
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "CRITICAL:", $1, "Secaucus IGW VIP (9017)", "NO CONNECTIVITY" }' |tee -a $CONNECTIVITY
   else
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "INFO:", $1, "Secaucus IGW VIP (9017)", "CONNECTIVITY OK" }' >> $CONNECTIVITY_INFO
   fi
else
   echo IGW | awk '{ printf "%-15s %-30s %-30s\n", "WARNING:", $1, "ROLE Not Defined" }' |tee -a $CONNECTIVITY_WARNING
fi


##########################################
# Fathom
##########################################
ROLE=`floodenv whoHasRole -f fathomserver`
if [ $ROLE ]; then
   echo -e "$VERIFY_FATHOM|$ROLE\n" >> $SERVER

   # Verify Connectivity to Fathom DBC VIP
   FQDN=`grep $VERIFY_FATHOM $SERVER |awk -F'|' '{ print $2}'`
   su flood -c "ssh -p 9019 -i ~flood/.ssh/fathom_srv_grp_dsa fathom@$FQDN hostname" >> $VERIFY_CONNECTION
   if [ $? -ne 0 ]; then
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "CRITICAL:", $1, "Fathom DBC VIP", "NO CONNECTIVITY" }' |tee -a $CONNECTIVITY
   else
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "INFO:", $1, "Fathom DBC VIP", "CONNECTIVITY OK" }' >> $CONNECTIVITY_INFO
   fi
else
   echo FATHOM | awk '{ printf "%-15s %-30s %-30s\n", "WARNING:", $1, "ROLE Not Defined" }' |tee -a $CONNECTIVITY_WARNING
fi


##########################################
# Analportal
##########################################
ROLE=`floodenv whoHasRole -f anlportal`
if [ $ROLE ]; then
   echo -e "$VERIFY_ANLPORTAL|$ROLE\n" >> $SERVER

   # Verify Connectivity to Anlportal
   FQDN=`grep $VERIFY_ANLPORTAL $SERVER |awk -F'|' '{ print $2}'`
   su flood -c "ssh -i ~flood/.ssh/batch_remote floodxfr@flanlport200 hostname" >> $VERIFY_CONNECTION
   if [ $? -ne 0 ]; then
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "CRITICAL:", $1, "Anlportal", "NO CONNECTIVITY" }' |tee -a $CONNECTIVITY
   else
      echo $FQDN | awk '{ printf "%-15s %-30s %-30s %-20s\n", "INFO:", $1, "Anlportal", "CONNECTIVITY OK" }' >> $CONNECTIVITY_INFO
   fi
else
   echo ANLPORTAL | awk '{ printf "%-15s %-30s %-30s\n", "WARNING:", $1, "ROLE Not Defined" }' |tee -a $CONNECTIVITY_WARNING
fi


if [[ -s $CONNECTIVITY_WARNING ]]; then
   cat $CONNECTIVITY_WARNING >> $CONNECTIVITY
fi

if [[ -s $CONNECTIVITY_INFO ]]; then
   cat $CONNECTIVITY_INFO >> $CONNECTIVITY
fi

rm $SERVER 2>/dev/null
rm $VERIFY_CONNECTION 2>/dev/null
rm $CONNECTIVITY_INFO 2>/dev/null
rm $CONNECTIVITY_WARNING 2>/dev/null
